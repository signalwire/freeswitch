--- mod_lua_wrap.cpp.old	2025-07-09 10:36:02.165895047 +0000
+++ mod_lua_wrap.cpp	2025-07-09 10:46:12.289624035 +0000
@@ -9639,6 +9639,7 @@
     }
     
     arg2 = (char *)lua_tostring(L, 2);
+    switch_assert(arg1);
     result = (bool)(arg1)->test_reactive(arg2);
     lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
     return SWIG_arg;
@@ -9769,6 +9770,7 @@
         (&arg3)->idx = 3;
       }
     }
+    switch_assert(arg1);
     result = (bool)(arg1)->query(arg2,arg3);
     lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
     return SWIG_arg;
@@ -9798,6 +9800,7 @@
     }
     
     arg3 = (char *)lua_tostring(L, 2);
+    switch_assert(arg1);
     result = (arg1)->query_rows(arg2,arg3);
     {
       SWIG_arg += result;
@@ -9824,6 +9827,7 @@
       SWIG_fail_ptr("Dbh_affected_rows",1,SWIGTYPE_p_LUA__Dbh);
     }
     
+    switch_assert(arg1);
     result = (int)(arg1)->affected_rows();
     lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
     return SWIG_arg;
@@ -9848,6 +9852,7 @@
       SWIG_fail_ptr("Dbh_last_error",1,SWIGTYPE_p_LUA__Dbh);
     }
     
+    switch_assert(arg1);
     result = (char *)(arg1)->last_error();
     lua_pushstring(L,(const char *)result); SWIG_arg++;
     return SWIG_arg;
@@ -9871,6 +9876,7 @@
       SWIG_fail_ptr("Dbh_clear_error",1,SWIGTYPE_p_LUA__Dbh);
     }
     
+    switch_assert(arg1);
     (arg1)->clear_error();
     
     return SWIG_arg;
@@ -9898,6 +9904,7 @@
     }
     
     arg2 = (char *)lua_tostring(L, 2);
+    switch_assert(arg1);
     result = (int)(arg1)->load_extension((char const *)arg2);
     lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
     return SWIG_arg;
@@ -9998,6 +10005,7 @@
     }
     
     arg2 = (char *)lua_tostring(L, 2);
+    switch_assert(arg1);
     result = (cJSON *)(arg1)->decode((char const *)arg2);
     {
       SWIG_arg += LUA::JSON::cJSON2LuaTable(L, result);
@@ -10031,6 +10039,7 @@
       (&arg2)->L = L;
       (&arg2)->idx = 2;
     }
+    switch_assert(arg1);
     result = (arg1)->encode(arg2);
     lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
     return SWIG_arg;
@@ -10058,6 +10067,7 @@
     }
     
     arg2 = (char *)lua_tostring(L, 2);
+    switch_assert(arg1);
     result = (cJSON *)(arg1)->execute((char const *)arg2);
     {
       SWIG_arg += LUA::JSON::cJSON2LuaTable(L, result);
@@ -10091,6 +10101,7 @@
       (&arg2)->L = L;
       (&arg2)->idx = 2;
     }
+    switch_assert(arg1);
     result = (cJSON *)(arg1)->execute(arg2);
     {
       SWIG_arg += LUA::JSON::cJSON2LuaTable(L, result);
@@ -10175,6 +10186,7 @@
     }
     
     arg2 = (char *)lua_tostring(L, 2);
+    switch_assert(arg1);
     result = (arg1)->execute2((char const *)arg2);
     lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
     return SWIG_arg;
@@ -10205,6 +10217,7 @@
       (&arg2)->L = L;
       (&arg2)->idx = 2;
     }
+    switch_assert(arg1);
     result = (arg1)->execute2(arg2);
     lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
     return SWIG_arg;
@@ -10285,6 +10298,7 @@
     }
     
     arg2 = (lua_toboolean(L, 2)!=0);
+    switch_assert(arg1);
     (arg1)->encode_empty_table_as_object(arg2);
     
     return SWIG_arg;
@@ -10311,6 +10325,7 @@
     }
     
     arg2 = (lua_toboolean(L, 2)!=0);
+    switch_assert(arg1);
     (arg1)->return_unformatted_json(arg2);
     
     return SWIG_arg;
