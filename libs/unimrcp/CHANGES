Changes for UniMRCP-1.7.0

  APR-toolkit library

  * If NTP has drifted the clock backwards, advance the queue based on the set timeout but not actual time difference. (Issue #257)

  MPF library

  * Feature: When tracing is set to a new mode of "3", send tracing logs directly to apt_log() using macro expansion. Thanks @sfgeorge. (Pull request #254)
  * Reset all the left-over variables on mpf_buffer_restart().

  MRCP client library

  * Added a new function mrcp_application_session_attribs_set() to the client application interface. The new function allows to set optional
    session attributes overriding or complimenting some of the profile settings such as SIP username or entire URI and feature tags.

  MRCP server library

  * Added a check for RTP settings on server profile registration.
  * While creating a new MRCP channel, make sure associated engine is open and ready to process requests.
  * Reworked profile-based association of MRCP resources and engines to allow specifying optional attributes per profile.
  * Added support for optional session attributes passed from signaling agents down to engines.

  MRCPv2 transport library
  
  * While trying to find an existing client connection, do not observe instances with closed socket. (Issue #259)
  * Limit concurrent/shared use of an MRCPv2 client connection by the configuration parameter max-shared-use-count similarly to the server connection.
  
  Sofia-SIP module (MRCPv2 agent)

  * Do not call nua_bye() and respond to session termination straightaway if nua_handle is used for resource discovery only.
  * In offline mode, respond with SIP 503 Service Unavailable to SIP OPTIONS requests. Thanks @michaelplevy. (Issue #242)
  * Allow disabling the Sofia SIP SDP Offer/Answer Engine Module. Thanks @schlagert. (Issue #248, Pull request #249)
  * Added support for optional session attributes passed from signaling agents down to engines.
  * Optionally extract SIP session call id and user name from SIP INVITE along with feature tags and pass them forward through session generic attributes.

  ASR Client application (and library)

  * Add asrclient support for multiple, builtin and remote grammars. Thanks @michaelplevy and @schlagert. (Issue #246)

  Miscellaneous

  * For Windows service, use RegisterServiceCtrlHandlerEx() instead of RegisterServiceCtrlHandler() in order to handle user-defined control cases for offline/online. Thanks @michaelplevy.
  * Added new parameters to default configuration files.


Changes for UniMRCP-1.6.0

  APR-toolkit library

  * Reworked log file rotation routine.
  * Added support for syslog on Linux.

  MPF library

  * Use APT_LOG_MARK for log statement(s) of mpf_activity_detector to address linker errors using VS.

  MRCP common library

  * Fixed parsing of MRCP messages containing leading whitespace(s) in the message body.

  MRCP server library

  * Fixed a race condition issue in the synthesizer state machine caused by concurrent
    SPEAK-COMPLETE event and BARGE-IN-OCCURRED request. (Issue #203)
  * Added a new accessor function mrcp_server_engine_get().
  * Association of MRCP resources and engines/plugins can now be specified dynamically per
    MRCPv2 session.

  RTSP library

  * Respond to incoming RTSP OPTIONS requests with success. This method is used to check the
    availability of the server.

  Sofia-SIP module (MRCPv2 agent)

  * Fixed MRCPv2 resource discovery routine of the client stack to populate multiple resources
    specified per single SDP media.	Thanks Tobias. (Issue #213)
  * Added support for feature tags set in the SIP header field Accept-Contact received in an initial
    SIP INVITE message.

  UMC sample application

  * Added virtual destructors to base classes UmcSessionEventHandler and UmcSessionMethodProvider.
  * Set Confidence-Threshold to 0.5 for sample recog session.
  * Made DTMF recog scenario/session on par with speech recog.
  * Made speech language configurable for synth scenario.

  Miscellaneous

  * Added mrcp_sofiasip_task.h and mrcp_sofiasip_task.c files to VS2005 project file as well.
  * Fixed maintainer-mode warnings with GCC 7.3.1. Thanks Tobias. (Issue #213)
  * First check the name of a command-line input not to be NULL before further parsing the command.
    The change applies to all the applications. (Issue #223)
  * Added a new default configuration file logfile.xml.
  * Set AR_FLAGS to [cr] in configure.ac in order to suppress link-time warnings caused by newer
    version of libtool 2.4.6.


Changes for UniMRCP-1.5.0

  APR-toolkit library

  * Added a helper function to set default log source.
  * Added a reset flag not to advance timer queue if elapsed time has been reset. Fixed timer skew issue.

  MPF library

  * Added a helper function to compare media descriptors.

  MRCP server library

  * Properly set the length of "Active-Request-Id-List" header field generated in STOP response messages.
    Fixed issue #190. Thanks Mert.
  * Revised the way log source is implemented in plugins by means of MRCP_LOGGER_IMPLEMENT() and
    MRCP_LOG_SOURCE_IMPLEMENT() macros.
  * Do not further process an MRCPv1 session offer (RTSP SETUP request), if engine_channel could not be
    created. Fixed issue #193.
  * Implemented graceful server shutdown.
  * Added functions mrcp_server_offline() and mrcp_server_online() to the server interface.
  * Implemented handling of a TCP/MRCPv2 peer disconnect event. Fixed issue #162.
  * Improved processing of SIP re-INVITEs. If a new offered session descriptor is identical to previous
    one, then do not re-build media streams.

  MRCPv2 transport library

  * Do not allow a TCP/MRCPv2 connection to be re-used more than the number of times specified by the
    configuration parameter max-shared-use-count.
  * Do not allow a TCP/MRCPv2 connection to remain in the connected state infinitely.
  * Added a helper function to compare control media descriptors.

  RTSP library

  * Do not allow an RTSP connection to remain in the connected state infinitely.
  * Implemented server-initiated session termination.
  * Fixed processing of an error case, when the RTSP session-id is missing in non-SETUP/DESCRIBE requests.
  * Implemented online/offline task interface methods by responding to incoming requests with
    503 Service Unavailable in offline mode.

  Sofia-SIP module (MRCPv2 agent)

  * Implemented server-initiated session termination.
  * Added mrcp_sofia_task as a common base for client and server agents by implementing apt_task interface
    via su_root.
  * Implemented online/offline task interface methods by responding to incoming requests with 503 Service
    Unavailable in offline mode.
  * Added support for SIP Session Timer (https://tools.ietf.org/html/rfc4028).
  
  RTSP module (MRCPv1 agent)

  * Implemented server-initiated session termination.
  
  UniMRCP server application

  * Added a new option -w or --without-cmdline, which allows to run unimrcpserver without command line.
    Fixed systemd issue.
  * Added offline and online commands to the unimrcpserver command-line interface.
  * Added new parameters <sip-session-expires> and <sip-min-session-expires> to default configuration
    of <sip-uas>.
  * Added a new parameter <inactivity-timeout> to default configuration of <rtsp-uas>.
  * Added new parameters <max-shared-use-count>, <inactivity-timeout> and <termination-timeout> to
    default configuration of <mrcpv2-uas>.

  UMC sample application

  * Split umcscenarios.xml configuration file into individual parts located in umc-scenarios subfolder.
  * Fixed profile selection logic.
  
  Miscellaneous

  * Added spaces between string literals in log statements to address compilation warnings.
  * Use apr_size_t instead of size_t consistently.
  * If pkg-config is missing, return an error on ./configure.


Changes for UniMRCP-1.4.0

  APR-toolkit library

  * Implemented a more flexible log filtering rules, which can be applied to various log sources.
  * Added helper macros for declaration and implementation of custom log sources.

  MPF library

  * Added new helper functions to allocate and copy RTP media and termination descriptors.
  * Implemented a custom log source by using a new MPF_LOG_MARK instead of the default APT_LOG_MARK.
  * Fixed the RTP port management routine to allocate ports within the specified range, even if the
    range contains odd number of ports. (Issue #182)

  MRCP client library

  * Added an extended version of the function mrcp_session_create(), which takes an external memory
    pool as an input argument by optionally taking ownership of the provided pool.
  * Added support for NTATAG_TIMER_C, which is disabled by default and can be specified via the
    client API or the configuration file unimrcpclient.xml.

  MRCP server library

  * Moved the function mrcp_session_answer_create() to a common place, since this function is used
    not only by the server, but also by a new proxy application.
  * Added a new helper macro for the plugins providing support for the use a custom log source.

  MRCPv2 transport library

  * Added a new function mrcp_control_offer_copy(), which is used by the proxy application to copy
    an offer received from the client in order to amend and send it over to the server.

  RTSP library

  * Implemented a custom log source by using a new RTSP_LOG_MARK instead of the default APT_LOG_MARK.

  Sofia-SIP module (MRCPv2 agent)

  * Implemented a custom log source by using a new SIP_LOG_MARK instead of the default APT_LOG_MARK.
  * Fixed a memory leak in processing of SIP OPTIONS requests by destroying the corrresponding
    nua_handle after sending a response.

  RTSP module (MRCPv1 agent)

  * Store the RTSP response code irregardless of presence of a message body.
  * Implemented a custom log source by using a new RTSP_LOG_MARK instead of the default APT_LOG_MARK.
  * Fixed processing of malformed responses not having the RTSP Content-Type set.

  Demo plugins

  * Using the new macro MRCP_PLUGIN_LOG_SOURCE_IMPLEMENT(), which allows to apply flexible log
    filtering rules to log records produced by plugins.
  * Fixed a possible NULL dereference, reported by Coverity scan.

  UMC sample application

  * Store and use the length of content loaded from a file not only for DEFINE-GRAMMAR requests, 
    but also for others.
  * Use the newly added mrcp_session_create_ex() mostly as a sample reference.
  * Slightly modified relationship between the classes UmcFramework and UmcSession mainly with regard
    to session tearing down routine.
  * Made non-functional changes to use a unified C++ coding style.
  * Took out an unused member variable m_pTimer.

  Miscellaneous

  * Added .gitignore file.
  * Replaced references to Google Code with GitHub.
  * Removed the legacy keyword $Id from all the header and source files.
  * Updated the default logger.xml to include several custom log sources.
  * Redefined the information provided by uni_revision.h.
  * Using a new macro UNI_FULL_VERSION_STRING to output version information in applications.
  * Added initial support for CMake-base build.
  * Fixed compilation warnings encountered with VS2015.
  * Added a test SIPP scenario for the UAC resource discovery, which is mainly used as a keep-alive
    mechanism by MRCP clients.


Changes for UniMRCP-1.3.0

  APR-toolkit library

  * Allow timers to be re-set. The ongoing timer, if any, will be implicitly stopped.
  * Added an optional timer support to the consumer task. This change requires the UniMRCP-deps 1.3.0 or above.
  * Slightly modified processing of start and termination requests in the apt_task interface.
  * Release task message, if the method signal() fails.
  * Added new methods to the apt_task interface to take a task offline: apt_task_offline() 
    and to bring it back online: apt_task_online().
  * Use apr_ring instead of apt_obj_list to hold the task tree.
  * Compose native file paths by using APR_FILEPATH_NATIVE flag.
  * Enhanced apt_dir_layout interface to allow creation and loading of bare and extended layouts.
  * Made apt_dir_layout_t structure opaque. This change may incur insignificant changes in user applications.
  * While parsing a header field spanning multiple lines, check the return value of 
    apt_text_line_read() first, and only then add the read line to the array.
  * Check the return value of apt_text_field_read() and only then, based on the result, 
    use either apt_string_copy() or apt_string_reset().
  * Fixed a possible integer overflow in the poller and consumer tasks.

  MPF library

  * Fixed a possible overflowed array index read (aka out-of-bound read) reported by Coverity.
  * Use memmove() instead of strcpy() for overlapping buffers.
  * While making calculations in mpf_codec_descriptor, cast to size_t first and only then multiply.

  MRCP common library

  * In mrcp_header_field_add(), do not try to add the same header field twice. 
    The second attempt would have failed anyway, though.

  MRCP client library

  * Use apr_ring instead of apt_obj_list for MRCPv2 connections.
  * Use apr_filepath_merge() to compose native file paths while loading the client stack.
  * Append a UniMRCP version string to the SIP user agent field.
  * For SIP message logging, if enabled, compose a path relative to the log directory by default. 
    Alternatively, a full path can be specified.
  * Fixed a potential NULL pointer dereference on processing of MPF messages.
  * Fixed a possible explicit NULL pointer dereference in mrcp_client_profile_create_ex().
  * Fixed a possible NULL pointer dereference which may occur when an invalid XML document name is
    specified in the configuration file.
  * Check the return value of apt_task_msg_acquire().
  * Separated declarations of MRCP client and server profiles.

  MRCP server library

  * Use apr_ring instead of apt_obj_list for MRCPv2 connections.
  * Use a connection specific pool for apr_socket_accept(). This makes memory allocation for accepted
    sockets more predictable and prevents possible indefinite use of the shared pool.
  * Use apr_hash to hold pending control channels. Before, mrcp_connection was used
    as a temporary container.
  * Append a UniMRCP version string to the SIP user agent field.
  * For SIP message logging, if enabled, compose a path relative to the log directory by default. 
    Alternatively, a full path can be specified.
  * Fixed a potential NULL pointer dereference on processing of MPF messages.
  * Fixed a possible NULL pointer dereference which may occur when an invalid XML document name is
    specified in the configuration file.
  * If channel->resource is a NULL pointer, do not dereference it while composing a log statement.
  * Separated declarations of MRCP client and server profiles.

  RTSP library

  * Use apr_ring to hold a list of RTSP connections. This change allows to get rid of a sub-pool 
    used for the connection list.

  Sofia-SIP module (MRCPv2 agent)

  * Let Sofia-SIP implicitly set the Contact header included in the transport parameter, when needed.
    This change fixes an interoperability problem with Avaya using SIP over TCP.
  * Do not uselessly check sip_contact->m_url against a NULL pointer, 
    since m_url is actually an array but not a pointer.
  * In case of redirection (SIP 3xx responses), compose the To header based on the Contact using 
    the API of Sofia-SIP.
  * Pass all the parameters to nua_create() and do not unnecessarily call nua_set_params().

  Miscellaneous

  * Remove automake generated build/compile script on maintainer-clean.
  * Use AM_CPPFLAGS instead of deprecated INCLUDES.
  * Use subdir-objects with AM_INIT_AUTOMAKE to prevent a bunch of warning messages encountered
    with automake 1.14.
  * Fixed support for out of tree build.
  * Use GNU standard 'sysconfdir' variable instead of custom 'confdir'.
  * Use APR_ENABLE_LAYOUT macro for pre-defined installation paths layouts.
  * Separated var and data directories. The var directory is supposed to hold files being created 
    and modified on run-time.
  * Enhanced UNIMRCP_CHECK_SOFIA m4 macro to look not only for Sofia-SIP installed prefix and
    source/build tree but also for the full path to Sofia-SIP pkg-config file.
  * Added a new optional command-line argument '--dir-layout' to the applications unimrcpserver,
    unimrcpclient, and umc. The argument, if specified, allows to load a custom directories layout 
    from the provided configuration file.
  * Use AM_PROG_CC_C_O macro in configure.ac, since automake 1.9 fails to generate Makefile.in 
    when/if the option subdir-objects is specified with AM_INIT_AUTOMAKE but AM_PROG_CC_C_O is not used.
  * Added new configure enable/disable options to control build of libraries and applications
    located in the platforms directory.
  * Added uni_revision.h file to the repository. Removed utility project svnrev which was supposed 
    to generate uni_revision.h.
  * Added a new #define UNI_REVISION_AT_LEAST(rev) which allows to check at compile time 
    that the revision base number is at least a certain level.
  * Added missing project dependencies. This addresses command-line build: msbuild unimrcp-2010.sln
  * Fixed mpftest application which had been broken for a while.
  * In log statements, use "Send/Receive Data" in place of "Send/Receive Stream".
  * Revised and simplified init.d script by using the standard init-script functions.
  * Took out obsolete inno-setup package creation scripts. The up-to-date versions are being 
    maintained with other binary installers.


Changes for UniMRCP-1.2.0

  APR-toolkit library

  * Implemented a new interface for the NLSML parser in accordance with the NSLML schema defined in http://tools.ietf.org/html/rfc6787#section-16.1.
  * Took out the legacy NLSML interface.
  * Fixed a gcc warning for strict-aliasing rules.
  * Implemented apt_pair_array_generate() in 2 passes, apr_pstrcatv() alike.
  * Prevent compilation warnings for unused-but-set-variable.
  * Use int instead of apt_task_msg_type_e to suppress a warning triggered by gcc 4.7: case value not in enumerated type 'apt_task_msg_type_e'.
  * Upon creation of a new memory pool, register apr_abortfunc_t callback which is supposed to be invoked when memory allocation fails within apr_pool.
  * Added apt_va_log() which accepts va_list as an input argument.
  * Set the default maximum number of log files used in rotation to 100.
  * Set thread names for APT tasks to be shown in debuggers. Thanks Vali.
  * Enable apt_timer logs only if APT_TIMER_DEBUG is defined.
  * Use a local temporary char buffer to construct the hostname in apt_ip_get() not to allocate memory from a permanent pool.
  * Unified pointer logging in APT style. Thanks Vali.
  * Define APT_PTR_FMT as 0x%I64x for 64-bit Windows.
  * Removed unused function apt_text_boolean_value_insert/apt_boolean_value_insert (inconsistent declaration/definition). Thanks Vali.

  MPF library

  * The function mpf_codec_lists_intersect() now returns FALSE if there is no match for the primary codec descriptor.
  * Reject the RTP session if there is no match in remote and local codecs.
  * Use the reserved RTP payload type 19 in case codec list is empty (media stream is rejected).
  * If the codec list does not match the capabilities, mark the stream as disabled.
  * Do not set SO_REUSEADDR on RTP sockets.
  * Made G.711 implementation bit-exact with ITU-T reference implementation.  
  * Use APR typedefs in G.711 implementation.
  * Improved the RTP port management for those cases when the specified RTP port range is not enough to handle concurrent MRCP sessions.
  * Check the number of ports per engine to be even to ensure there is a room for a pair of RTP/RTCP ports.
  * Added debugging capabilities to mpf_frame_buffer.
  * Copy name string when adding to codec capabilities. Thanks Vali.

  MRCP common library

  * Use apr_snprintf() instead of sprintf() in mrcp_request_id_generate().
  * Get rid of local fixed-size char buffers and additional string copies. Instead, allocate buffers from memory pool and generate strings straight into the buffers.

  MRCP client library

  * Completed the implementation of the new API function to retrieve a SIP/RTSP response code received from the server (Issue-90).
  * Fixed a potential crash of the client stack which could happen when the server unexpectedly closes the MRCPv2 connection while the client stack is processing an application request.
  * Allow a pool/factory of signaling agents to be defined with the MRCPv1 and/or MRCPv2 profiles.
  * Respond straight away with success to the session termination request if the session creation failed in the first place.
  * Keep track of associations between RTP termination factories (pools of RTP ports) and media engines.
  * Allow a pool/factory of media processing engines to be defined with the MRCPv1 and/or MRCPv2 profiles.
  * Allow a pool/factory of MRCPv2 connection agents to be defined with the MRCPv2 profiles.
  * Added the ability to specify an IP address by the name of network interface/adapter.
  * Added a new accessor function to the client API mrcp_client_profiles_get() which retrieves the available profiles.
  * Store the profile name not only as a key in the profile table but also in the profile structure.
  * Allow setting an arbitrary tag to the profile.

  MRCP server library
  
  * Handle separately the case when an RTSP SETUP contains no SDP, which means it's up to the server to decide which codec to use.
  * Fixed a crash if MRCP resource not found. Thanks Vali.
  * Keep track of associations between RTP termination factories (pools of RTP ports) and media engines.
  * Added the ability to specify an IP address by the name of network interface/adapter.
  * Log maximum engine channel count exceeded. Thanks Vali.

  Sofia-SIP module (MRCPv2 agent)

  * Do not generate media format list for a disabled audio stream.
  * Use snprintf() consistently in mrcp_sdp.c.
  * Implemented the log redirection routine of SofiaSIP.
  * Added an indentifier of the SofiaSIP agent to the log statement "Receive SIP Event".

  RTSP module (MRCPv1 agent)

  * Do not generate media format list for a disabled audio stream.

  Demo plugins

  * Respond with failure if codec descriptor is unavailable (associated media stream is disabled).

  UMC sample application

  * Terminate execution of sample application if media descriptor is unavailable (media stream is disabled).
  * Use the new NLSML parser interface in sample apps.
  * Set the header field Save-Waveform to TRUE in the sample umc recog application.
  * Fixed an invalid read of 8 bytes in umc application: sizeof(mpf_codec_capabilities_t) was meant to be allocated.

  ASR Client application (and library)

  * Get rid of 1Kb grammar file limit in libasrclient. Load the content into an allocated buffer instead. 

  Miscellaneous

  * Copy the version and revision header files located in the build directory to the SDK include directory.
  * Added/fixed support for DESTDIR.
  * Take into consideration m4 macro files generated for/by libtool 2.  
  * Set ac_macro_dir variable manually, since newer versions of autoconf don't do that.
  * Enable silent build rules (--enable-silent-rules)and use silent build by default.
  * Enhanced the report generated by the ./configure script.
  * Pass no-define to AM_INIT_AUTOMAKE in order not to define PACKAGE and VERSION.
  * Do not use autoconf generated compiler DEFS by replacing confdefs.h after AC_INIT, AM_INIT_AUTOMAKE and AC_PROG_LIBTOLL getting called.
  * Updated definition of the macro AX_COMPILER_VENDOR and moved it out from configure.ac to a separate m4 file.
  * Added missing dereferences of pointers to the (potential) terminal NUL of some strings. Thanks Vali.
  * Disabled DEFAULT_INCLUDES provided by automake.
  * Added generic apr_common.m4 in order to use helper m4 macros APR_ADDTO() and APR_CONFIG_NICE().
  * Generate ./config.nice to reuse ./configure command-line.
  * Added uni_plugin.m4 which provides generic macros UNI_PLUGIN_ENABLED(name) and UNI_PLUGIN_DISABLED(name).
  * Added common GNU make rules/vars for plugins, client and server libs/apps alike VS property sheets.
  * The macro UNIMRCP_CHECK_APR() now checks and sets variables for both APR and APR-util libraries.
  * Added a brief description of the license definition which is intended to be used for Windows resource files only.
  * Brought XML schema definitions of configuration file formats up to date.
  * Cppcheck: printf-like formats fix, possible NULL pointer dereference, member not initialized in the constructor, 
    unused variable/value, method can be made static. Thanks Vali.
  * Define _WIN64 in Visual Studio x64 targets (for IDE only, the compiler defines _WIN64 anyway). Thanks Vali.
  * Fixed some GCC warnings. Thanks Vali.
  * Moved mrcp-flite and mrcp-pocketsphinx plugins out of the source tree into the external solutions directory.


Changes for UniMRCP-1.1.0

  APR-toolkit library

  * The function apt_log_file_open() makes a copy of dir_path and file_name variables passed from a user application.
  * Applied a patch to the apt_log routine which allows the log file to be appended instead of being overwritten. The patch was submitted by Dani. Thanks.
  * Added a new parameter to the function apt_log_file_open() which specifies whether the log file should be appended or overwritten.
  * Fixed the formatting of float values in the header fields. Applied a patch submitted by Randy (Issue-108). Thanks.
  * Fixed apt_log_output_mode_check() which returned TRUE if any mode was enabled or checked regardless their correspondence. Thanks Vali.
  * Enhanced the debug output by adding task message identifier to the log statements "Signal Message" and "Process Message".
  * Fixed a potential crash related to the use of pollsets.
  * Fixed a potential buffer overflow in apt_text_pair_array_insert(). Thanks Vali.
  * Remove a socket descriptor from the pollset only if the descriptor has been properly added to the pollset. Otherwise, this operation could cause a crash.

  MPF library

  * Tweaked DTMF detector's energy thresholds to eliminate false positives during in-band (from audio) DTMF detection. Thanks Vali.
  * Took into consideration the RTP marker in order to re-sync the jitter buffer on a new talkspurt. Audio data loss could be experienced in the RTP receiver in case of consecutive SPEAK (for client) or RECOGNIZE (for server) requests.
  * Instead of discarding a non-aligned RTP packet, adjust the timestamp and write available frames to the jitter buffer (Issue-122).
  * Added support for the adaptive jitter buffer. Applied a reworked patch submitted by Erik. Thanks.
  * Enhanced the detection of a new RTP talkspurt by implicitly setting the RTP marker if a gap between two RTP packets is more than the specified threshold (INTER_TALSKPUSRT_GAP = 1000 msec).
  * Allow the initial playout delay in the jitter buffer to be set to 0.
  * Implemented a time skew detection algorithm for RTP streams. The detection can be enabled and used for both the adaptive and static jitter buffer.
  * Added support for redirection of RTP traces (RTP_TRACE, JB_TRACE) to the debug output window of Visual Studio.
  * Enhanced the processing of the RTP named events.

  RTSP library

  * Use strcasecmp() instead of apr_strnatcasecmp() to match RTSP resource names (Issue-94).
  * Fixed a crash in the RTSP client stack when the server closes a TCP connection while the associated RTSP session is being destroyed (Issue-124).
  * Fixed the processing of RTSP TEARDOWN requests being timed out. Applied a patch submitted to Issue-125 by Chris. Thanks.
  * For logging purposes, pass a string identifier of the RTSP/MRCPv1 signaling agent to the RTSP client and server stacks.

  MRCP common library

  * Added missing recognizer header fields used for voice enrollment (speaker-dependent recognition).
  * Added support for custom MRCP header fields.
  * Added support for speaker verification and identification resource.
  * Added missing recognizer methods used for voice enrollment and interpretation.
  * Updated the state machine of the recognizer resource to take into consideration requests, responses and events used for interpretation.
  * Enhanced helper functions which operate on the MRCP header to properly set, get and inherit header fields (Issue-110).

  MRCP client library

  * Added support for SIP redirection with 300 Multiple Choices used by the Nuance Resource Manager. 
  * Added support for feature-tags set in the SIP Accept-Contact header field in an outgoing SIP INVITE message sent to the Nuance Resource Manager.
  * Added a new accessor function to the client API to get an audio stream associated with the specified channel. The function name is mrcp_application_audio_stream_get().
  * Added the ability to retrieve an external object associated with the MRCP session through the log handler (apt_log_ext_handler_f).
  * Fixed the processing of a response to the SIP OPTIONS request used for resource discovery (Issue-112).
  * Added a new constructor function unimrcp_client_create2() which allows to pass the client XML configuration not by a file, but rather by a string parameter. Thanks Vali.
  * Fixed the processing of more than one pending application requests upon reception of a SIP BYE message from the server.
  * Fixed the loading of the client configuration parameter <offer-new-connection>.
  * Respond to client user application requests with failure if a new session couldn't be created due to an error in initialization of the SIP stack (Issue-127).
  * When originating an offer from the client, take into account capabilities of an audio stream created by the client user application.
  * Added a new function to the client API to retrieve a SIP/RTSP response code received from the server (Issue-90). The support is incomplete.

  MRCP server library

  * Fixed an interoperability issue with AVP. The mid attribute is not required when the SDP contains only one m-line.
  * Fixed the build of C++ MRCP plugins for platforms other than Win32. Thanks Vali.
  * Added the ability to take and use parameters set by the plugin in a response to the GET-PARAMS request. Thanks Vali.

  Sofia-SIP module

  * Took out unused tags (variables) to compile with Sofia-SIP 1.12.11.
  * Added support for Sofia-SIP's TPTAG_LOG() and TPTAG_DUMP() tags which can be enabled from the client and server configuration to print out and/or dump SIP messages.

  PocketSphinx plugin

  * In the PocketSphinx plugin, instead of using one common timeout for detection of speech activity and inactivity, use two different timeouts: one for activity and the other for inactivity detection.
  * In the recognition results sent from the PocketSphinx plugin, set both <instance> and <input> elements.
  * Fixed a race condition in the PocketSphinx plugin which caused the server to crash.
  * Fixed the use of recognition timer in the PocketSphinx plugin.
  * Set an MRCP version specific completion cause in the PocketSphinx plugin.

  UniMRCP server application

  * Enhanced the UniMRCP Windows service manager. Thanks Vali.
  * Corrected FileType in Windows resources from DLL to APP. Thanks Vali.
  * Added a Windows resource file for the unimrcpservice application.

  UMC sample application

  * Set the default profile name in umcscenarios.xml to "uni2".
  * Added sample 8kHz and 16 kHz voiceprints in the data directory which are used by the umc application for a sample verification scenario.
  * Added mandatory attributes for the SSML <speak> element in the sample speak.xml file.
  * Added support for a binary recognition grammar used in RecogScenario by the sample umc application. Thanks Vali.
  * Added a sample SRGS ABNF grammar to the data directory.

  Miscellaneous

  * Added init.d script. The script was originally submitted by pdeschen. Thanks.
  * Modified the "prepare" utility project to use the new location of PthreadVC2.dll which is now built from source with other dependencies.
  * Added support for Visual Studio 2010.
  * Modified the MPF test application to read a raw PCM data from one file, transmit it over RTP, and write the data back to another file.
  * Set the libtool parameters link_all_deplibs and link_all_deplibs_CXX to "yes" by default, with an option to disable them (--disable-interlib-deps), if ever needed. This fixes a link error on recent Debian/Ubuntu distributions.
  * Modified the apr.m4 and apu.m4 macros to use '--link-ld' instead of '--link-libtool --libs' for the APR library dependencies. This addresses the problem with a wrong -L path to the expat library.
  * Set prerequisite version for autoconf to 2.59.
  * Added a checking for pkg-config to the configure script.
  * Added a new option (-v or --version) to the unimrcpserver as well as the sample umc and unimrcpclient applications.
